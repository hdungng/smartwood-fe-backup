import { AutoGeneratedField } from 'types/common';
import { Entity } from '../core';
import { ContractPurchasePackingPlanItem, CreateContractPurchaseWeightTicketRequest } from './request';
import { ApprovalStatus, CommonStatus } from '../../utils';

export type PurchaseContractWeightTicketItemResponse = {
  quantity: number;
  realQuantity: number;
  status: CommonStatus;
  unitPrice: number;
  supplierName: string;
  goodId: number;
  startTime: string;
  endTime: string;
};

export type PurchaseContractPackingPlanGoodSupplierResponse = Entity<number> &
  ContractPurchasePackingPlanItem & {
    code: string;
    realQuantity?: number;
    supplierName?: string;
    actualWeight: number;
    remainingWeight: number;
    coverageQuantity?: number;
  };

export type PurchaseContractWeightTicketResponse = AutoGeneratedField & {
  purchaseContractWeightTicketDetails: any[];
};

export type PurchaseContractDetailResponse = AutoGeneratedField & {
  contractId: number;
  code: string;
  status: CommonStatus;
  businessPlanId: number;
  draftPoId: number;
  customerName: string;
  customerId: number;
  contractCode: string;
  contractNumber: string;
  contractDate: string;
  sellerId: number;
  sellerName: string;
  buyerId: number;
  buyerName: string;
  saleContractId?: number;
  purchaseContractWeightTicket?: PurchaseContractWeightTicketResponse;
  purchaseContractPackingPlan?: {
    id: number;
    code: string;
    status: CommonStatus;
    isApprove: boolean;
    shippingScheduleId: number;
    createdAt: Date | string;
    lastUpdatedAt?: Date | string;
    purchaseContractPackingPlanGoodSuppliers: PurchaseContractPackingPlanGoodSupplierResponse[];
  };
};

export type CreatePurchaseContractResponse = Entity<number>;

export type GetDetailPurchaseContractWeightTicketResponse = CreateContractPurchaseWeightTicketRequest;

export type SaleContractCodeBooking = Entity<number> & {
  codeBooking: string;
  exportPort: string
};

export type ListSaleContractResponse = Entity<number> & {
  businessPlanId: number;
  contractId: number;
  saleContractCode: string;
  totalWeight: number;
  unitPrice: number;
  weightThreshold: number;
  breakEvenPrice: number;
  weightPerContainer: number;
  unit: string;
  maxDateToBuy: Date | string;
  codeBookings: SaleContractCodeBooking[];
};
